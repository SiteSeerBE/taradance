// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

// NextAuth Schema
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  firstName     String?
  lastName      String?
  bio           String?   @db.Text
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  initials      String?
  roles         Role[]
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  groups        Group[]
}

model Role {
  id    String   @id @default(cuid())
  role  RoleType
  users User[]
}

model Group {
  id    Int    @id @default(autoincrement())
  name  String
  shoes String
  users User[]
}

//content
model Post {
  id         Int      @id @default(autoincrement())
  orderId    Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  title      String
  published  Boolean  @default(false)
  authorId   String?
  locationId Int
  author     User?    @relation(fields: [authorId], references: [id], onDelete: SetNull)
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
}

model Location {
  id    Int          @id @default(autoincrement())
  name  LocationType
  posts Post[]
}

//types
enum RoleType {
  ADMIN
  TEACHER
  USER
  VISITOR
  WRITER
}

enum LocationType {
  HOME
  BLOG
}
