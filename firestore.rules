rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /home/{articleId} {
      allow create: if hasAnyRole(['admin']) 
        && request.time == request.resource.data.createdAt;
      allow create, update, delete: if hasAnyRole(['admin']);
      allow read
    }

      match /news/{articleId} {
        allow create: if hasAnyRole(['admin']) 
          && request.auth.uid == request.resource.data.authorId 
          && request.time == request.resource.data.createdAt;
        allow read, update, delete: if hasAnyRole(['admin']) 
          || request.auth.uid == resource.data.authorId;
        allow read: if resource.data.published == true 
          && resource.data.date <= request.time 
          && resource.data.isNext == false;
        allow read: if resource.data.pulbished == true 
          && resource.data.date > request.time 
          && resource.data.isNext == true;
      }

      match /people/{userId} {
        allow create: if isSignedIn()
          &&request.auth.uid == userId 
          && request.time == request.resource.data.createdAt;
        allow read, update: if isSignedIn() 
          && (request.auth.uid == userId 
          || hasAnyRole(['admin']));
        allow delete: if hasAnyRole(['admin']);
      }    

      match /users/{userId} {
        allow create: if hasAnyRole(['admin']) 
          && request.time == request.resource.data.createdAt;
        allow read: if isSignedIn() 
          && (request.auth.uid == userId 
          || hasAnyRole(['admin']));
        allow update, delete: if hasAnyRole(['admin']);
      }

      function isSignedIn() {
        return request.auth != null;
      }

      function hasAnyRole(roles) {
        return isSignedIn()
          && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.hasAny(roles)
      }
    }
  }